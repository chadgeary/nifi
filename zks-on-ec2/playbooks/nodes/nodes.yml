---
- name: nodes.yml
  hosts: localhost
  become: True
  become_user: root
  tasks:

    - name: set zookeeper connection string
      set_fact:
        zookeeper_nodes: "zk1.{{ name_prefix }}{{ name_suffix }}.internal:2173,zk2.{{ name_prefix }}{{ name_suffix }}.internal:2173,zk3.{{ name_prefix }}{{ name_suffix }}.internal:2173"

    - name: set host in hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address }} {{ ansible_nodename }}"
        state: present

    - name: nifi required packages
      package:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - default-jre
        - jq
        - python3-pip
        - unzip
      retries: 60
      delay: 3
      register: install_packages
      until: install_packages is not failed

    - name: ansible required packages
      pip:
        executable: /usr/bin/pip3
        name: "{{ packages }}"
      vars:
        packages:
        - awscli
        - boto
        - boto3
        - botocore

    - name: nifi user
      user:
        name: nifi
        comment: Apache NiFi Service Account

    - name: cloudwatch user
      user:
        name: cloudwatch
        comment: AWS Cloudwatch Agent Service Account
        groups: adm,nifi
        append: yes

    - name: cloudwatch agent download
      get_url:
        url: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
        dest: /opt/amazon-cloudwatch-agent.deb

    - name: cloudwatch agent install
      apt:
        deb: /opt/amazon-cloudwatch-agent.deb
        state: present

    - name: cloudwatch conf
      file:
        path: /opt/aws/amazon-cloudwatch-agent/etc
        state: directory
        mode: 0755
        owner: cloudwatch
        group: cloudwatch

    - name: cloudwatch conf file
      template:
        src: amazon-cloudwatch-agent.json
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        owner: cloudwatch
        group: cloudwatch
        mode: '0440'

    - name: cloudwatch agent load configuration file
      shell: |
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

    - name: set route53 record
      route53:
        state: present
        overwrite: yes
        private_zone: yes
        zone: "{{ name_prefix }}{{ name_suffix }}.internal"
        record: "{{ ansible_nodename }}"
        type: A
        ttl: 600
        value:
          - "{{ ansible_default_ipv4.address }}"
        wait: yes
      retries: 30
      delay: 2
      register: route53_record
      until: route53_record is not failed

    - name: nifi management directories
      file:
        path: "{{ item }}"
        state: directory
        owner: nifi
        group: nifi
        mode: 0750
      with_items:
        - /opt/nifi-certificates
        - /opt/nifi-conf
        - /opt/nifi-downloads

    - name: remove any previous bucket file (for dynamic bucket changes)
      file:
        path: /opt/nifi-conf/bucket
        state: absent

    - name: set bucket in conf
      lineinfile:
        line: "{{ s3_bucket }}"
        path: /opt/nifi-conf/bucket
        owner: nifi
        group: nifi
        mode: 0640
        create: yes

    - name: check nifi downloaded
      stat:
        path: /opt/nifi-downloads/nifi.tar.gz
      register: nifi_downloaded

    - name: check toolkit downloaded
      stat:
        path: /opt/nifi-downloads/nifi-toolkit.tar.gz
      register: toolkit_downloaded

    - name: download nifi from s3 if not downloaded
      aws_s3:
        region: "{{ aws_region }}"
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "nifi/downloads/{{ item }}"
        dest: "/opt/nifi-downloads/{{ item }}"
      with_items:
        - nifi.tar.gz
      become_user: nifi
      when:
        - nifi_downloaded.stat.exists == false
      retries: 900
      delay: 2
      register: nifi_from_s3
      until: nifi_from_s3 is not failed

    - name: download toolkit from s3 if not downloaded
      aws_s3:
        region: "{{ aws_region }}"
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "nifi/downloads/{{ item }}"
        dest: "/opt/nifi-downloads/{{ item }}"
      with_items:
        - nifi-toolkit.tar.gz
      become_user: nifi
      when:
        - toolkit_downloaded.stat.exists == false
      retries: 300
      delay: 2
      register: toolkit_from_s3
      until: toolkit_from_s3 is not failed

    - name: check nifi unarchived
      stat:
        path: /opt/nifi-{{ nifi_version }}/LICENSE
      register: nifi_unarchived

    - name: unarchive nifi when not unarchived
      unarchive:
        src: /opt/nifi-downloads/nifi.tar.gz
        dest: /opt
        remote_src: yes
        owner: nifi
        group: nifi
      when: nifi_unarchived.stat.exists == false

    - name: recursive chown nifi
      file:
        path: /opt/nifi-{{ nifi_version }}
        state: directory
        recurse: yes
        owner: nifi
        group: nifi

    - name: link nifi version to /opt/nifi
      file:
        src: /opt/nifi-{{ nifi_version }}
        path: /opt/nifi
        state: link
        mode: 0755
        owner: nifi
        group: nifi

    - name: check toolkit unarchived
      stat:
        path: /opt/nifi-toolkit-{{ nifi_version }}/LICENSE
      register: toolkit_unarchived

    - name: unarchive toolkit when not unarchived
      unarchive:
        src: /opt/nifi-downloads/nifi-toolkit.tar.gz
        dest: /opt
        remote_src: yes
        owner: nifi
        group: nifi
      when: toolkit_unarchived.stat.exists == false

    - name: recursive chown toolkit
      file:
        path: /opt/nifi-toolkit-{{ nifi_version }}
        state: directory
        recurse: yes
        owner: nifi
        group: nifi

    - name: link toolkit version to /opt/nifi-toolkit
      file:
        src: /opt/nifi-toolkit-{{ nifi_version }}
        path: /opt/nifi-toolkit
        state: link
        mode: 0755
        owner: nifi
        group: nifi

    - name: authorizers.xml
      template:
        src: authorizers.xml
        dest: /opt/nifi/conf/authorizers.xml
        owner: nifi
        group: nifi
        mode: 0640

    - name: nifi systemd service file
      copy:
        src: nifi.service
        dest: /etc/systemd/system/nifi.service
        mode: 0444
        owner: nifi
        group: nifi

    - name: pull generated password from s3
      aws_s3:
        region: "{{ aws_region }}"
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "nifi/conf/{{ item }}"
        dest: "/opt/nifi-conf/{{ item }}"
      with_items:
        - generated_password
      become_user: nifi
      retries: 900
      delay: 2
      register: pw_from_s3
      until: pw_from_s3 is not failed

    - name: set generated_password var
      shell: |
        cat /opt/nifi-conf/generated_password
      become_user: nifi
      register: generated_password

    - name: bootstrap.conf
      template:
        src: bootstrap.conf
        dest: /opt/nifi/conf/bootstrap.conf
        owner: nifi
        group: nifi
        mode: 0640
      register: nifi_bootstrap_conf_file

    - name: nifi properties
      template:
        src: nifi.properties
        dest: /opt/nifi/conf/nifi.properties
        owner: nifi
        group: nifi
        mode: 0640
      register: nifi_properties_file

    - name: logback.xml
      template:
        src: logback.xml
        dest: /opt/nifi/conf/logback.xml
        owner: nifi
        group: nifi
        mode: 0640
      register: nifi_log_file

    - name: connect string in state-management
      lineinfile:
        path: /opt/nifi/conf/state-management.xml
        regexp: '        <property name="Connect String">.*</property>'
        line: '        <property name="Connect String">zk1.{{ name_prefix }}{{ name_suffix }}.internal:2173,zk2.{{ name_prefix }}{{ name_suffix }}.internal:2173,zk3.{{ name_prefix }}{{ name_suffix }}.internal:2173</property>'

    - name: check ca exists
      stat:
        path: /opt/nifi-certificates/nifi-cert.pem
      register: ca_cert

    - name: pull ca from s3
      aws_s3:
        region: "{{ aws_region }}"
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "nifi/certificates/{{ item }}"
        dest: "/opt/nifi-certificates/{{ item }}"
      with_items:
        - nifi-cert.pem
        - nifi-key.key
      become_user: nifi
      when: ca_cert.stat.exists == false
      retries: 900
      delay: 2
      register: ca_from_s3
      until: ca_from_s3 is not failed

    - name: check admin exists
      stat:
        path: /opt/nifi-certificates/admin/keystore.p12
      register: admin_cert

    - name: ensure admin dir for s3 objects
      file:
        path: /opt/nifi-certificates/admin
        state: directory
        owner: nifi
        group: nifi
        mode: 0750

    - name: pull admin from s3
      aws_s3:
        region: "{{ aws_region }}"
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "nifi/certificates/admin/{{ item }}"
        dest: "/opt/nifi-certificates/admin/{{ item }}"
      with_items:
        - keystore.p12
        - truststore.jks
        - private_key.pem
        - admin_cert.pem
      when: admin_cert.stat.exists == false
      become_user: nifi
      retries: 900
      delay: 2
      register: admin_from_s3
      until: admin_from_s3 is not failed

    - name: admin cli.properties template
      template:
        src: cli.properties
        dest: /opt/nifi-certificates/admin/cli.properties
        owner: nifi
        group: nifi
        mode: 0640

    - name: check node keystore exists
      stat:
        path: /opt/nifi-certificates/{{ ansible_nodename }}/keystore.jks
      register: node_cert

    - name: generate node keystore when not exists
      shell: |
        export JAVA_HOME=/usr/lib/jvm/default-java
        /opt/nifi-toolkit/bin/tls-toolkit.sh standalone -c {{ lb_dns }} -n {{ ansible_nodename }} -d 3650 -k 2048 -s SHA256WITHRSA -T jks --subjectAlternativeNames {{ ansible_nodename }} -P {{ generated_password.stdout }} -S {{ generated_password.stdout }}
      args:
        chdir: /opt/nifi-certificates/
        executable: /bin/bash
      become_user: nifi
      when: node_cert.stat.exists == false

    - name: copy scale-down scale-user and scale-up scripts
      template:
        src: "scale-{{ item }}"
        dest: "/usr/local/bin/scale-{{ item }}"
        owner: nifi
        group: nifi
        mode: 0550
      with_items:
        - down
        - up-adduser
        - up-permitproxy

    - name: timers and service units
      copy:
        src: "{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
        owner: root
        group: root
        mode: 0640
      with_items:
        - nifi.service
        - nifi.timer

    - name: run scale-up script to add node as user
      shell: |
        /usr/local/bin/scale-up-adduser
      become_user: nifi

    - name: nifi systemd
      systemd:
        name: "nifi.{{ item }}"
        daemon_reload: yes
        state: "{% if nifi_properties_file.changed or nifi_log_file.changed or nifi_bootstrap_conf_file.changed %}restarted{% else %}started{% endif %}"
        enabled: yes
      with_items:
        - service
        - timer

    - name: wait for web port
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ web_port }}"
        timeout: 600

    - name: run scale-up script to permit node to proxy
      shell: |
        /usr/local/bin/scale-up-permitproxy
      become_user: nifi
      retries: 60
      delay: 3
      register: scale_up
      until: scale_up is not failed
